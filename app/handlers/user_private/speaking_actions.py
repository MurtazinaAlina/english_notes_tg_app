"""
–†–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é "–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ".

INFO:

–ü–†–ê–ö–¢–ò–ö–ê –ü–†–û–ò–ó–ù–û–®–ï–ù–ò–Ø
1. –ê—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ (–ø—É—Ç—å –∫ –Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤
   –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö). –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è.
2. –ü—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è, –æ–±—ä–µ–∫—Ç –ø—Ä–∏–º–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ state –ø–æ–¥ –∫–ª—é—á–æ–º
   'random_example_obj'.
3. –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á 'saving_structure' –≤ state (–¢.–∫. –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤
   callback –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º). –í —ç—Ç–æ–º –∫–ª—é—á–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
   'attempt_number' (—Ç.–µ. –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–ø—ã—Ç–∫–æ–π
   –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 'saving_structure' —Å 'attempt_number'=1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –º–æ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–∞.
   –î–∞–ª–µ–µ, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞—É–¥–∏–æ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –æ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
5. –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ.
   –ü—É—Ç—å –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –ª–æ–≥–∏–∫–∞: app/data/audio/user_{user_id}/{date}/{filename}.ogg.
   –í –ø–∞–ø–∫–µ /audio/ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –¥–∞—Ç–∞–º, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∞—É–¥–∏–æ
   –∑–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É.
"""
import os
import shutil
import datetime

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from app.common.fsm_classes import SpeakingFSM
from app.common.tools import clear_auxiliary_msgs_in_chat, check_if_authorized
from app.common.msg_templates import oops_with_error_msg_template, oops_try_again_msg_template
from app.filters.custom_filters import ChatTypeFilter, IsKeyInStateFilter
from app.utils.custom_bot_class import Bot
from app.utils.tts import speak_text
from app.banners import banners_details
from app.keyboards.inlines import get_kbds_with_navi_header_btns, get_inline_btns
from app.database.db import DataBase
from app.settings import AUDIO_TEMP_PATH, AUDIO_FINAL_PATH


# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
speaking_router = Router()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ —Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
speaking_router.message.filter(ChatTypeFilter(['private']))


# –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@speaking_router.callback_query(F.data == 'clear_chat')
async def clear_chat(callback: types.CallbackQuery, bot: Bot) -> None:
    """
    –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –æ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤.

    :param callback: CallbackQuery-–∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞ 'clear_chat'
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :return: None
    """
    await clear_auxiliary_msgs_in_chat(bot, callback.message.chat.id)


# –¢–ï–ö–°–¢ -> –í –ê–£–î–ò–û

# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ", –®–ê–ì 1 - –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@speaking_router.callback_query(F.data.startswith('convert_text_to_audio'))
async def convert_text_to_audio(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ", –®–ê–ì 1 - –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.

    :param callback: CallbackQuery-–∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞ 'convert_text_to_audio'
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    :return: None
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    btns = {'–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç üóë': 'clear_chat'}
    kbds = get_kbds_with_navi_header_btns(btns=btns, level=2, menu_name='speaking', sizes=(2, 1))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–∞–Ω–Ω–µ—Ä –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback.message.edit_caption(caption=banners_details.speaking_tts, reply_markup=kbds)
    except (Exception, ):
        pass

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    await state.set_state(SpeakingFSM.text_input)


# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ", –®–ê–ì 2 - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª
@speaking_router.message(SpeakingFSM.text_input, F.text)
async def speaking_text_input(message: types.Message, state: FSMContext, bot: Bot, session: AsyncSession) -> None:
    """
    –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ", –®–ê–ì 2 - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª.

    :param message: –í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param session: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è
    :return: None
    """
    text = message.text
    await speak_text(text, bot, message.chat.id, is_with_title=True, autodelete=False, state=state, session=session)
    await bot.delete_message(message.chat.id, message.message_id)

    # INFO: –Ω–∞ –≤—ã—Ö–æ–¥–µ –æ—Å—Ç–∞—ë—Ç—Å—è SpeakingFSM.text_input, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ


# –ü–†–ê–ö–¢–ò–ö–ê –ü–†–û–ò–ó–ù–û–®–ï–ù–ò–Ø. –ó–ê–ü–ò–°–¨ –ü–†–û–ò–ó–ù–û–®–ï–ù–ò–Ø

# –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
@speaking_router.callback_query(F.data == 'speaking_practice')
async def speaking_practice_main(callback: types.CallbackQuery, bot: Bot, state: FSMContext, session: AsyncSession) \
        -> None:
    """
    –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è".
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.

    :param callback: CallbackQuery-–∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞ 'speaking_practice'
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    :param session: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è
    :return: None
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if not await check_if_authorized(callback, bot, callback.message.chat.id):
        return None

    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = bot.auth_user_id[callback.message.chat.id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ Context
    if not await DataBase.check_if_user_has_examples(session, user_id):
        await callback.answer('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–º–µ—Ä–æ–≤!', show_alert=True)

    # –û—á–∏—â–∞–µ–º —á–∞—Ç
    await clear_auxiliary_msgs_in_chat(bot, callback.message.chat.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∞—É–¥–∏–æ
    tmp_audio_dir = AUDIO_TEMP_PATH.format(user_id=user_id)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(tmp_audio_dir, exist_ok=True)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
    try:
        for filename in os.listdir(tmp_audio_dir):
            file_path = os.path.join(tmp_audio_dir, filename)
            if os.path.isfile(file_path):
                os.unlink(file_path)
    except (Exception, ) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

    # –î–æ—Å—Ç–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    random_example_obj = await DataBase.get_random_context(session, user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º
    await state.update_data(random_example_obj=random_example_obj)
    await state.update_data(saving_structure={})                            # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    await state.update_data(attempt_number=1)                               # –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
    btns = {
        'üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å': 'listen_example',
        '–ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä ‚è©': 'speaking_practice',
        '–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç üóë': 'clear_chat',
    }
    kbds = get_kbds_with_navi_header_btns(btns=btns, level=2, menu_name='speaking', sizes=(2, ))
    caption = banners_details.speaking_practice.format(example=random_example_obj.example)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–∞–Ω–Ω–µ—Ä –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback.message.edit_caption(caption=caption, reply_markup=kbds)
    except (Exception, ) as e:
        print(e)


# –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–∞
@speaking_router.callback_query(F.data == 'listen_example', IsKeyInStateFilter('random_example_obj'))
async def speaking_practice_listen_example(callback: types.CallbackQuery, bot: Bot, state: FSMContext,
                                           session: AsyncSession) -> None:
    """
    –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–∞.

    :param callback: CallbackQuery-–∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞ 'listen_example'
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å –∫–ª—é—á–æ–º 'random_example_obj' —Å –æ–±—ä–µ–∫—Ç–æ–º –ø—Ä–∏–º–µ—Ä–∞ Context;
    :param session: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    state_data = await state.get_data()
    random_example_obj = state_data.get('random_example_obj')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–∞
    text = random_example_obj.example
    chat_id = callback.message.chat.id
    await speak_text(text, bot, chat_id, is_with_title=True, autodelete=False, state=state, session=session)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤
@speaking_router.message(F.voice, IsKeyInStateFilter('random_example_obj'))
async def speaking_practice_recording(message: types.Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤.

    :param message: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å –∫–ª—é—á–∞–º–∏:
                  'random_example_obj' - –æ–±—ä–µ–∫—Ç –ø—Ä–∏–º–µ—Ä–∞ Context;
                  'attempt_number' - –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–æ–≥–æ –∞—É–¥–∏–æ —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è;
                  'saving_structure' - —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                  —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    file = await bot.get_file(message.voice.file_id)
    file_name = f"{message.voice.file_id}.ogg"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_id = bot.auth_user_id[message.chat.id]
    tmp_path = os.path.join(AUDIO_TEMP_PATH.format(user_id=user_id), file_name)
    await bot.download_file(file.file_path, destination=tmp_path)

    # –î–æ—Å—Ç–∞–µ–º –∏–∑ state –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    state_data = await state.get_data()
    saving_structure = state_data.get('saving_structure')
    attempt_number = state_data.get('attempt_number')

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–∞—Ç —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await bot.delete_message(message.chat.id, message.message_id)
    keyboard = get_inline_btns(btns={'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å': f"save_audio:attempt_{attempt_number}"})
    audio = FSInputFile(path=tmp_path)
    msg = await message.answer_audio(audio=audio, caption=f"–ü–æ–ø—ã—Ç–∫–∞ {attempt_number}", reply_markup=keyboard)
    bot.auxiliary_msgs['user_msgs'][message.chat.id].append(msg)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ state
    saving_structure[attempt_number] = message.voice.file_id
    attempt_number += 1
    await state.update_data(saving_structure=saving_structure)
    await state.update_data(attempt_number=attempt_number)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ. –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∞—É–¥–∏–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ
@speaking_router.callback_query(F.data.startswith('save_audio'), IsKeyInStateFilter('saving_structure'))
async def speaking_practice_save_audio(callback: types.CallbackQuery, bot: Bot, state: FSMContext,
                                       session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ. –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∞—É–¥–∏–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ.

    :param callback: CallbackQuery-–∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞ 'save_audio'
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å –∫–ª—é—á–∞–º–∏:
                  'attempt_number' - –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–æ–≥–æ –∞—É–¥–∏–æ —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è;
                  'saving_structure' - —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                  —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    :param session:
    :return:
    """

    # –î–æ—Å—Ç–∞–µ–º –∏–∑ state –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    state_data = await state.get_data()
    saving_structure = state_data.get('saving_structure')

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ —Å –ø–æ–ø—ã—Ç–∫–æ–π –∏–∑ callback
    attempt_number = int(callback.data.split('_')[-1])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    file_name = saving_structure[attempt_number]

    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = bot.auth_user_id[callback.message.chat.id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞ –¥–∞—Ç—É
    audio_root_dir = AUDIO_FINAL_PATH.format(user_id=user_id, date=datetime.date.today())

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(audio_root_dir, exist_ok=True)

    try:
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
        temp_path = os.path.join(AUDIO_TEMP_PATH.format(user_id=user_id), f'{file_name}.ogg')
        final_path = os.path.join(audio_root_dir, f'{file_name}.ogg')
        shutil.move(temp_path, final_path)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –∞—É–¥–∏–æ –≤ –ë–î
        write_to_db = await DataBase.save_file_path_to_audio(session, final_path, user_id)
        if write_to_db:
            await callback.answer('‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', show_alert=True)
        else:
            await callback.answer(oops_try_again_msg_template, show_alert=True)

    except Exception as e:
        msg_text = oops_with_error_msg_template.format(error=str(e))
        await callback.answer(msg_text, show_alert=True)
